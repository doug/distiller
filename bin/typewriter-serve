#!/usr/bin/env node
'use strict';

var fs = require('fs'),
  path = require('path'),
  render = require('./render'),
  chokidar = require('chokidar'),
  bs = require("browser-sync").create(),
  exec = require('child_process').exec;

let buildDirName = 'build';
let assetsDirName = 'assets';

var workingDir = process.cwd();
let buildDir = path.join(workingDir, buildDirName);
let assetsDir = path.join(workingDir, assetsDirName);
let buildAssetsDir = path.join(buildDir, assetsDirName);

//TODO this is a little hacky, no?
exec('rm -r ' + buildAssetsDir);
exec('cp -r ' + assetsDir + ' ' + buildAssetsDir);

//TODO async, mask the eexists error, throw others.
try {
  fs.mkdirSync(buildDir);
} catch (error) {
  console.error(error)
}

// Watch index.html
renderIndex();

var indexWatcher = chokidar.watch([path.join(workingDir, "index.html"), path.join(workingDir, "index.md")]);
indexWatcher.on('change', renderIndex);

function renderIndex() {
  render(workingDir, (rendered) => {
    fs.writeFile(path.join(workingDir, buildDirName, 'index.html'), rendered, (error) => {
      if (error) throw error;
    });
  });
}

// Watch assets directory
// TODO we should do stuff with .css, .ts, etc files.
// run a prefixer, linter?
// adding files not handled?
var assetWatcher = chokidar.watch(path.join(assetsDir, "*"));
assetWatcher
  .on('change', copyAsset)
  //TODO this renders the html for each file in assets on startup.
  .on('add', copyAsset)
  .on('unlink', file => {
    //TODO remove from assets dir.
    console.log(file + " has been removed.")
  });

function copyAsset(file) {
  let base = path.basename(file);
  let dir = path.dirname(file).replace(assetsDirName, '');
  let newFile = path.join(dir, buildDirName, assetsDirName, base);
  fs.createReadStream(file).pipe(fs.createWriteStream(newFile));
  renderIndex();
}

//BrowserSync server
bs.init({
  server: './build',
  files: './build',
  notify: false,
  reloadDebounce: 20,
  injectChanges: false,
  open: false,
  ui: false
});