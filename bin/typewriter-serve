#!/usr/bin/env node
'use strict';

var fs = require('fs'),
  path = require('path'),
  render = require('./render'),
  chokidar = require('chokidar'),
  exec = require('child_process').execSync;

var ss = require('node-static');

let buildDirName = 'build';
let assetsDirName = 'assets';

var workingDir = process.cwd();
let buildDir = path.join(workingDir, buildDirName);
let assetsDir = path.join(workingDir, assetsDirName);
let buildAssetsDir = path.join(buildDir, assetsDirName);

// remove old directory, create and copy new one
exec('rm -rf ' + buildDir);
try {
  fs.mkdirSync(buildDir);
} catch (error) {
  console.error(error)
}
exec('cp -r ' + assetsDir + ' ' + buildAssetsDir);

function renderIndex(callback) {
  render(workingDir, (rendered) => {
    fs.writeFileSync(path.join(workingDir, buildDirName, 'index.html'), rendered);
    callback();
  });
}

// Watch assets directory
// TODO we should do stuff with .css, .ts, etc files.
// run a prefixer, linter?
var assetWatcher = chokidar.watch(path.join(assetsDir, "*"));
assetWatcher
  .on('change', copyAsset)
  //TODO this renders the html for each file in assets on startup.
  .on('add', copyAsset)
  .on('unlink', file => {
    //TODO remove from assets dir.
    console.log(file + " has been removed.")
  });

function copyAsset(file) {
  let base = path.basename(file);
  let dir = path.dirname(file).replace(assetsDirName, '');
  let newFile = path.join(dir, buildDirName, assetsDirName, base);
  fs.createReadStream(file).pipe(fs.createWriteStream(newFile));
}

var fileServer = new ss.Server('./build');

require('http').createServer(function (request, response) {
    request.addListener('end', function () {
        renderIndex(() => fileServer.serve(request, response));
    }).resume();
}).listen(3000);
